# --------------------------------------------------------------------------- #
# NOTE: Caching of dependencies does not happen here, this project assumes that
#       developers will use a venv which will be mounted.

FROM python:3.11 AS base

RUN useradd -d /home/captura captura \
  && mkdir /home/captura \
  && chown captura:captura /home/captura

RUN chown -R captura:captura /home/captura

USER captura
WORKDIR /home/captura/app
# ENV PATH="$PATH:/home/captura/.local/bin"

ENTRYPOINT ["bash"]


# --------------------------------------------------------------------------- #

# NOTE: Do not add environment variables here! They should be defined in the
#       compose file.
FROM base AS development

# NOTE: Assumes that build is occuring at the project root.
COPY ./docker/docker.sh /home/captura/.bashrc


# --------------------------------------------------------------------------- #

FROM base AS ci

# NOTE: Assumes that build is occuring at the project root.
COPY --chown=captura:captura ./ /home/captura/app


# --------------------------------------------------------------------------- #

FROM ci AS production

RUN mkdir /home/captura/.captura /home/captura/.captura/logs
COPY ./docker/logging.yaml /home/captura/.captura
COPY ./docker/docker.sh /home/captura/docker.sh

# NOTE: Captura secret should be set explicitly when running containers in some
#       sort of horrizontal scaling.
ENV CAPTURA_APP__ENVIRONMENT="production" \
  CAPTURA_LOGS_CONFIG="/home/captura/.captura/logging.yaml" \
  CAPTURA_LOGS_PATH="/home/captura/.captura/logs" \
  CAPTURA_CONFIG_APP="/home/captura/.captura/app.yaml" \
  CAPTURA_CONFIG_CLIENT="/home/captura/.captura/client.yaml" \
  CAPTURA_STATIC="/home/captura/static" \
  CAPTURA_SECRET="changeme"

RUN bash /home/captura/docker.sh ci >> ~/.captura/logs/ci.log
ENTRYPOINT ["python3", "-m", "app", "run"]


# --------------------------------------------------------------------------- #
# NOTE: This its own step since it does not make sense to build all images dep
#       ending on plugins as it can be very inconsistent. If using this, just
#       ensure that all generated images are properly tagged.

FROM production AS production_with_plugins

RUN bash /home/captura/docker.sh plugins


# --------------------------------------------------------------------------- #

FROM prod AS test

ENV CAPTURA_CONFIG_LOG = "/home/captura/.captura/logging.yaml" \
  CAPTURA_CONFIG_APP_TEST = "/home/captura/.captura/app.yaml" \
  CAPTURA_CONFIG_CLIENT_TEST = "/home/captura/.captura/client.yaml"

RUN pip install /home/captura/app[test]
ENTRYPOINT ["python", "-m", "pytest"]

