name: Validation
on:
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - '**.rst'
  push:

jobs:
  # NOTE: https://commitlint.js.org/guides/ci-setup.html
  lint-commit:
    name: Lint Commit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install required dependencies
        run: |
          sudo apt update && sudo apt install -y git curl

          curl -sL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo DEBIAN_FRONTEND=noninteractive apt install -y nodejs

          npm install conventional-changelog-conventionalcommits
          npm install commitlint@latest @commitlint/config-conventional

      - name: Print versions
        run: |
          echo "git version: $(git --version)" >> $GITHUB_STEP_SUMMARY
          echo "node version: $(node --version)" >> $GITHUB_STEP_SUMMARY
          echo "npm version: $(npm --version)" >> $GITHUB_STEP_SUMMARY
          echo "commitlint version: $(npx commitlint --version)" >> $GITHUB_STEP_SUMMARY

      - name: Validate current commit (last commit) with commitlint
        if: github.event_name == 'push'
        run: npx commitlint --last --verbose

  lint-code:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Pip
        uses: actions/cache@v3
        id: venv
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('poetry.lock') }}

      - name: Venv and Setup 
        run: |
          echo -e "## Python Info\n" >> $GITHUB_STEP_SUMMARY
          echo "- Python Version: \`$( python --version )\`" >> $GITHUB_STEP_SUMMARY
          echo "- Python Binary: \`$( which python )\`" >> $GITHUB_STEP_SUMMARY

          python -m venv .venv
          source .venv/bin/activate

          python -m pip install poetry mypy ruff
          poetry install

      - name: MyPy Check Source.
        id: mypy_check_src
        run: |
          source .venv/bin/activate

          echo -e "## MyPy \`./src\`\n\n~~~stdout" >> $GITHUB_STEP_SUMMARY
          poetry run mypy --config-file pyproject.toml --pretty ./src >> $GITHUB_STEP_SUMMARY
          echo -e "~~~\n" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

      - name: MyPy Check Tests.
        id: mypy_check_tests
        run: |
          source .venv/bin/activate

          echo -e "## MyPy \`./tests\`\n\n~~~stdout" >> $GITHUB_STEP_SUMMARY
          poetry run mypy --config-file pyproject.toml --pretty ./tests >> $GITHUB_STEP_SUMMARY
          echo -e "~~~\n" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

      - name: Ruff Linting.
        id: ruff
        run: |
          source .venv/bin/activate

          echo -e "## Ruff\n\n~~~stdout" >> $GITHUB_STEP_SUMMARY
          poetry run ruff check --config pyproject.toml --output-format github .>> $GITHUB_STEP_SUMMARY
          echo -e "~~~\n" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

      - run: |
          if ( \
            [ "${{ steps.mypy_check_src.outcome }}" != "success" ] \
            || [ "${{ steps.mypy_check_tests.outcome }}" != "success" ] \
            || [ "${{ steps.ruff.outcome }}" != 'success' ]
          ); then
            echo "One or more checks failed. See the summary for details."
            exit 1
          fi


  pytest:
    name: PyTest
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout.
        uses: actions/checkout@v4

      # NOTE: Use ``docker compose --file docker/compose.yaml config | less``
      #       to see the config with interpolated variables from ``.env``.
      #       More about interpolation: https://docs.docker.com/compose/environment-variables/variable-interpolation/
      #
      # NOTE: More on caching can be found in the following: 
      #       - https://github.com/docker/build-push-action?tab=readme-ov-file#usage
      #       - https://docs.docker.com/build/cache/backends/gha/
      - name: Setup Docker Buildx.
        uses: docker/setup-buildx-action@v3

      - name: Build Server Image.
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/dockerfile
          target: ci
          tags: acederberg/captura-ci # should match tags in `./docker/compose.ci.yaml`. 
          pull: false
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup.
        run: |
          docker_config_path='/home/captura/app/tests/assets/act.yaml'

          echo "CAPTURA_CONFIG_CLIENT_TEST=$docker_config_path" > .env
          echo "CAPTURA_CONFIG_CLIENT=$docker_config_path" >> .env
          echo "CAPTURA_CONFIG_APP_TEST=$docker_config_path" >> .env
          echo "CAPTURA_CONFIG_APP=$docker_config_path" >> .env
          echo "CAPTURA_FLAKEY=/home/captura/flakey.yaml" >> .env

      - name: Start Docker Compose Project.
        run: |
          docker compose \
            --file docker/compose.ci.yaml \
            --env-file .env \
            up --detach --build --quiet-pull

      # NOTE: ``act.yaml`` defined everything necessary for the client and server.
      - name: Generate Dummy Data In Server.
        run: |
          version=$( \
            docker compose \
            --file docker/compose.ci.yaml \
            exec db mysql --version \
          )
          echo "MySQL Version: $version" >> $GITHUB_STEP_SUMMARY
          docker compose \
            --file docker/compose.ci.yaml \
            exec server \
            bash -c ' \
              source ~/app/.venv/bin/activate \
              && poetry run simulatus initialize \
              && poetry run simulatus apply'

          # echo -e "# Dummy Data Report\n\n~~~" >> $GITHUB_STEP_SUMMARY
          # docker compose \
          #   --file docker/compose.ci.yaml \
          #   exec server \
          #   bash -c ' \
          #     source ~/app/.venv/bin/activate \
          #     && poetry run simulatus --loud reports aggregate' \
          #   >> $GITHUB_STEP_SUMMARY
          # echo -e "~~~\n" >> $GITHUB_STEP_SUMMARY

      - name: Run Tests.
        run: |
          docker compose \
            --file docker/compose.ci.yaml \
            exec server \
            bash -c ' \
              source ~/app/.venv/bin/activate \
              && pip install poetry \
              && poetry run coverage run -m pytest --count 1'
        continue-on-error: true

      - name: Create Coverage Report.
        run: |
          docker compose \
            --file docker/compose.ci.yaml \
            exec server \
            bash -c ' \
              source ~/app/.venv/bin/activate \
              && poetry run coverage html'
        continue-on-error: true

      - name: Stop Compose Project.
        if: always()
        run: docker compose --file docker/compose.ci.yaml down


